version: "3"

services:
  jupyterhub:
    user: 0:0
    ports:
      - 8000:8000
    build:
      context: jupyterhub
      args:
        JUPYTERHUB_VERSION: ${JUPYTERHUB_VERSION}
    image: fitiotlab/iot-lab-jupyterhub
    container_name: jupyterhub
    environment:
      - DOCKER_NETWORK_NAME=${COMPOSE_PROJECT_NAME}_default
      - JUPYTERHUB_USERS_DIR
      - JUPYTERLAB_DOCKER_IMAGE
      - JUPYTERLAB_USERNAME
    volumes:
      # Bind Docker socket on the host so we can connect to the daemon from
      # within the container
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - ${JUPYTERHUB_USERS_DIR}:/srv/jupyterhub/users
    labels: # Traefik configuration.
      - traefik.enable=true
      - traefik.frontend.rule=Host:${JUPYTERHUB_HOSTNAME}
    command: >
      jupyterhub -f /srv/jupyterhub/iotlab_config.py --log-level=${JUPYTERHUB_DEBUG_LEVEL}
    restart: on-failure

  reverse-proxy:
    image: traefik:v1.7.16
    container_name: jupyterhub-reverse-proxy
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${TRAEFIK_CONF_DIR}/traefik.toml:/etc/traefik/traefik.toml
      - ${TRAEFIK_CERTS_DIR}:/etc/certs
    restart: on-failure

  jupyterlab-base:
    build:
      context: jupyterlab-base
      args:
        JUPYTERHUB_VERSION: ${JUPYTERHUB_VERSION}
    image: fitiotlab/iot-lab-jupyterlab-base
    container_name: jupyterlab-base-none
    command: echo

  jupyterlab:
    build:
      context: jupyterlab
    image: fitiotlab/iot-lab-jupyterlab
    container_name: jupyterlab-none
    command: echo
